//-------------------------------------------------------------------------
#ifndef Xyce_N_DEV_bsim3_va_h
#define Xyce_N_DEV_bsim3_va_h

#include <Sacado.hpp>

// ----------   Xyce Includes in header ----------
#include <N_DEV_Configuration.h>
#include <N_DEV_Const.h>
#include <N_DEV_DeviceBlock.h>
#include <N_DEV_DeviceInstance.h>
#include <N_DEV_DeviceModel.h>
#include <N_UTL_Math.h>
// ---------- Macros Definitions ----------
#define KOVERQ        8.61734e-05
#define P_CELSIUS0    273.15
using std::max;
using std::min;
#define ELIM          1.0e+20
#define _VT0_(T) ((T) * KOVERQ)
#define _VT_ cogenda_vt_nom
#define _TEMPER_ cogendaTemperature
#define _LIMEXP_(x) ((x)<log(ELIM)? exp(x) : (ELIM*(x) + ELIM - ELIM*log(ELIM)))
#define _CURRTIME_ (getSolverState().currTime_)
#define analysis_noise (getSolverState().noiseFlag)
#define analysis_dc (getSolverState().dcsweepFlag || getSolverState().dcopFlag)
#define analysis_tran (getSolverState().transientFlag)

namespace Xyce {
namespace Device {
namespace COGENDAbsim3_va {
// This typedef is for our automatic differentiation:
typedef Sacado::Fad::SFad<double,5> CogendaFadType;

class Model;
class Instance;
const CogendaFadType UNITFAD=CogendaFadType(1.0);
template<typename ArgIn>
static ArgIn cogenda_ternary_op(const bool cond,const ArgIn  &ifTrue, const ArgIn  &ifFalse){
 if (cond)
  return ifTrue;
 else
  return ifFalse;
}
template<typename ArgIn>
static ArgIn cogenda_ternary_op(const bool cond,const ArgIn  &ifTrue, const double &ifFalse){
 if (cond)
  return ifTrue;
 else
  return ArgIn(ifFalse);
}
template<typename ArgIn>
static ArgIn cogenda_ternary_op(const bool cond,const double &ifTrue, const ArgIn  &ifFalse){
 if (cond)
  return ArgIn(ifTrue);
 else
  return ifFalse;
}
template<typename ArgIn>
static ArgIn cogenda_ternary_op(const bool cond,const double &ifTrue, const double &ifFalse){
 if (cond)
  return ArgIn(ifTrue);
 else
  return ArgIn(ifFalse);
}

struct Traits: public DeviceTraits<Model, Instance>
{
  static const char *name() {return "COGENDA bsim3_va";}
  static const char *deviceTypeName() {return "bsim3_va level 1";}

  static int numNodes() {return 4;}
  static bool modelRequired() {return true;}
  static bool isLinearDevice() {return false;}

  static Device *factory(const Configuration &configuration, const FactoryBlock &factory_block);
  static void loadModelParameters(ParametricData<Model> &model_parameters);
  static void loadInstanceParameters(ParametricData<Instance> &instance_parameters);
};
class Instance : public DeviceInstance
{
  friend class ParametricData<Instance>;
  friend class Model;
  friend struct Traits;

  public:
    Instance(
      const Configuration &       configuration,
      const InstanceBlock &       instance_block,
      Model &                     model,
      const FactoryBlock &        factory_block);

    ~Instance();

private:
    Instance(const Instance &);
    Instance &operator=(const Instance &);

public:
    void registerLIDs( const LocalIdVector & intLIDVecRef,
                       const LocalIdVector & extLIDVecRef );
    void registerStoreLIDs( const LocalIdVector & stoLIDVecRef );
    void setupPointers();

    void loadNodeSymbols(Util::SymbolTable &symbol_table) const;

    const JacobianStamp & jacobianStamp() const;
    void registerJacLIDs( const JacobianStamp & jacLIDVec );

    void registerBranchDataLIDs(const std::vector<int> & branchLIDVecRef);

    bool processParams();
    void initInternalVars();
    bool updateTemperature ( const double & temp = -999.0 );
    bool updateIntermediateVars ();
    bool updatePrimaryState ();
    bool updateSecondaryState ();

    // load functions, residual:
    bool loadDAEQVector ();
    bool loadDAEFVector ();

    // load functions, Jacobian:
    bool loadDAEdQdx ();
    bool loadDAEdFdx ();
    void collapseNodes();


  private:

  public:
    Model &getModel() {  return model_; }

  private:
    Model & model_;   //< Owning Model
    //Node LID Variables
    int li_d;
    int li_g;
    int li_s;
    int li_b;
    int li_di;
    int li_si;
    //Branch LID Variables
    //Lead Branch Variables
    int li_branch_id;
    int li_branch_ig;
    int li_branch_is;
    int li_branch_ib;
    //Jacobian pointers
    double * f_s_Equ_s_Node_Ptr;
    double * f_s_Equ_si_Node_Ptr;
    double * f_si_Equ_s_Node_Ptr;
    double * f_si_Equ_si_Node_Ptr;
    double * f_d_Equ_d_Node_Ptr;
    double * f_d_Equ_di_Node_Ptr;
    double * f_di_Equ_d_Node_Ptr;
    double * f_di_Equ_di_Node_Ptr;
    double * f_di_Equ_b_Node_Ptr;
    double * f_di_Equ_si_Node_Ptr;
    double * f_di_Equ_g_Node_Ptr;
    double * f_si_Equ_b_Node_Ptr;
    double * f_si_Equ_di_Node_Ptr;
    double * f_si_Equ_g_Node_Ptr;
    double * f_g_Equ_b_Node_Ptr;
    double * f_g_Equ_si_Node_Ptr;
    double * f_g_Equ_di_Node_Ptr;
    double * f_g_Equ_g_Node_Ptr;
    double * f_b_Equ_b_Node_Ptr;
    double * f_b_Equ_si_Node_Ptr;
    double * f_b_Equ_di_Node_Ptr;
    double * f_b_Equ_g_Node_Ptr;
    double * q_s_Equ_s_Node_Ptr;
    double * q_s_Equ_si_Node_Ptr;
    double * q_si_Equ_s_Node_Ptr;
    double * q_si_Equ_si_Node_Ptr;
    double * q_d_Equ_d_Node_Ptr;
    double * q_d_Equ_di_Node_Ptr;
    double * q_di_Equ_d_Node_Ptr;
    double * q_di_Equ_di_Node_Ptr;
    double * q_di_Equ_b_Node_Ptr;
    double * q_di_Equ_si_Node_Ptr;
    double * q_di_Equ_g_Node_Ptr;
    double * q_si_Equ_b_Node_Ptr;
    double * q_si_Equ_di_Node_Ptr;
    double * q_si_Equ_g_Node_Ptr;
    double * q_g_Equ_b_Node_Ptr;
    double * q_g_Equ_si_Node_Ptr;
    double * q_g_Equ_di_Node_Ptr;
    double * q_g_Equ_g_Node_Ptr;
    double * q_b_Equ_b_Node_Ptr;
    double * q_b_Equ_si_Node_Ptr;
    double * q_b_Equ_di_Node_Ptr;
    double * q_b_Equ_g_Node_Ptr;
    //Jacobian Offsets
    int m_s_Equ_s_NodeOffset;
    int m_s_Equ_si_NodeOffset;
    int m_si_Equ_s_NodeOffset;
    int m_si_Equ_si_NodeOffset;
    int m_d_Equ_d_NodeOffset;
    int m_d_Equ_di_NodeOffset;
    int m_di_Equ_d_NodeOffset;
    int m_di_Equ_di_NodeOffset;
    int m_di_Equ_b_NodeOffset;
    int m_di_Equ_si_NodeOffset;
    int m_di_Equ_g_NodeOffset;
    int m_si_Equ_b_NodeOffset;
    int m_si_Equ_di_NodeOffset;
    int m_si_Equ_g_NodeOffset;
    int m_g_Equ_b_NodeOffset;
    int m_g_Equ_si_NodeOffset;
    int m_g_Equ_di_NodeOffset;
    int m_g_Equ_g_NodeOffset;
    int m_b_Equ_b_NodeOffset;
    int m_b_Equ_si_NodeOffset;
    int m_b_Equ_di_NodeOffset;
    int m_b_Equ_g_NodeOffset;
    //Node Constants
    static const int cogendaNodeID_d = 0;
    static const int cogendaNodeID_g = 1;
    static const int cogendaNodeID_s = 2;
    static const int cogendaNodeID_b = 3;
    static const int cogendaNodeID_di = 4;
    static const int cogendaNodeID_si = 5;
    static const int cogendaNodeID_GND = -1;
    //Branch Constants
    //Probe Constants
    static const int cogendaProbeID_V_di_si = 0;
    static const int cogendaProbeID_V_b_si = 1;
    static const int cogendaProbeID_V_g_si = 2;
    static const int cogendaProbeID_V_s_si = 3;
    static const int cogendaProbeID_V_d_di = 4;
    //Limited Probe Store LIDs
    //Collapsible Bools
    bool collapseNode_si;
    bool collapseNode_di;
    //FadArrays
 // Arrays to hold probes
 std::vector < CogendaFadType > probeVars;
 // Arrays to hold contributions
 // dynamic contributions are differentiated w.r.t time
 std::vector < CogendaFadType > staticContributions;
 std::vector < CogendaFadType > dynamicContributions;


    // this is what we'll use when any model uses $temperature.  We'll
    // set it in updateTemperature, and initialize it to whatever
    // is in devOptions when the instance is constructed.
    double cogendaTemperature;
    double cogenda_vt_nom;

    // This one is for the annoying bogus "XycecogendaInstTemp" parameter
    // that we need so we can set it from the device manager when there's no
    // "TEMP" parameter to use
    double cogendaInstTemp;
//   Model Parameters also as instance params
    double _ckt_gmin;
    double a0;
    double a1;
    double a2;
    double acde;
    int acm;
    double ad;
    double af;
    double agidl;
    double agisl;
    double ags;
    double aigbacc;
    double aigbinv;
    double aigc;
    double aigd;
    double aigs;
    double aigsd;
    double alpha0;
    double alpha1;
    double as;
    double at;
    double b0;
    double b1;
    double beta0;
    double bgidl;
    double bgisl;
    double bigbacc;
    double bigbinv;
    double bigc;
    double bigd;
    double bigs;
    double bigsd;
    int binflag;
    int binunit;
    int breakmod;
    double bvd;
    double bvj;
    double bvs;
    int calcacm;
    int capmod;
    double cbd;
    double cbs;
    double cdsc;
    double cdscb;
    double cdscd;
    double cf;
    double cgbo;
    double cgdl;
    double cgdo;
    double cgidl;
    double cgisl;
    double cgsl;
    double cgso;
    double cigbacc;
    double cigbinv;
    double cigc;
    double cigd;
    double cigs;
    double cigsd;
    double cit;
    double cj;
    double cjgate;
    double cjsw;
    double cjswg;
    double ckappa;
    double clc;
    double cle;
    double cta;
    double ctp;
    double del;
    double delk1;
    double delnfct;
    double delta;
    double deltox;
    double delvto;
    double dlc;
    double dlcig;
    double drout;
    double dsub;
    double dtoxcv;
    double dvt0;
    double dvt0w;
    double dvt1;
    double dvt1w;
    double dvt2;
    double dvt2w;
    double dwb;
    double dwc;
    double dwg;
    double ef;
    double eg;
    double egidl;
    double egisl;
    double eigbinv;
    double elm;
    double em;
    double eta0;
    double etab;
    double fc;
    double fcsw;
    double fgidl;
    double fgisl;
    double flkmod;
    double gamma1;
    double gamma2;
    double gap1;
    double gap2;
    int geo;
    int gidlmod;
    double hdif;
    int igbmod;
    int igcmod;
    double ijth;
    double ijthdrev;
    double ijthsrev;
    double imax;
    double imelt;
    double is;
    double jmax;
    double jmelt;
    double js;
    double jssw;
    double jsw;
    double k1;
    double k2;
    double k3;
    double k3b;
    double keta;
    double kf;
    double kgidl;
    double kgisl;
    double kt1;
    double kt1l;
    double kt2;
    double ku0;
    double kvsat;
    double kvth0;
    double l;
    double la0;
    double la1;
    double la2;
    double lacde;
    double lagidl;
    double lagisl;
    double lags;
    double laigbacc;
    double laigbinv;
    double laigc;
    double laigd;
    double laigs;
    double laigsd;
    double lalpha0;
    double lalpha1;
    double lat;
    double lb0;
    double lb1;
    double lbeta0;
    double lbgidl;
    double lbgisl;
    double lbigbacc;
    double lbigbinv;
    double lbigc;
    double lbigd;
    double lbigs;
    double lbigsd;
    double lcdsc;
    double lcdscb;
    double lcdscd;
    double lcf;
    double lcgdl;
    double lcgidl;
    double lcgisl;
    double lcgsl;
    double lcigbacc;
    double lcigbinv;
    double lcigc;
    double lcigd;
    double lcigs;
    double lcigsd;
    double lcit;
    double lckappa;
    double lclc;
    double lcle;
    double ld;
    double ldelta;
    double ldif;
    double ldrout;
    double ldsub;
    double ldvt0;
    double ldvt0w;
    double ldvt1;
    double ldvt1w;
    double ldvt2;
    double ldvt2w;
    double ldwb;
    double ldwg;
    double legidl;
    double legisl;
    double leigbinv;
    double lelm;
    double leta0;
    double letab;
    int level;
    double lfgidl;
    double lfgisl;
    double lgamma1;
    double lgamma2;
    double lgcd;
    double lgcs;
    double lint;
    double lk1;
    double lk2;
    double lk3;
    double lk3b;
    double lketa;
    double lkgidl;
    double lkgisl;
    double lkt1;
    double lkt1l;
    double lkt2;
    double lku0;
    double lkvth0;
    double ll;
    double llc;
    double lln;
    double llodku0;
    double llodvth;
    double lmax;
    double lmin;
    double lmlt;
    double lmoin;
    double lnch;
    double lnfactor;
    double lngate;
    double lnigbacc;
    double lnigbinv;
    double lnigc;
    double lnlx;
    double lnoff;
    double lnpeak;
    double lnsd;
    double lnsub;
    double lntox;
    double lodeta0;
    double lodk2;
    double lpclm;
    double lpdiblc1;
    double lpdiblc2;
    double lpdiblcb;
    double lpigcd;
    double lpoxedge;
    double lprt;
    double lprwb;
    double lprwg;
    double lpscbe1;
    double lpscbe2;
    double lpvag;
    double lrd;
    double lrdsw;
    double lref;
    double lrgidl;
    double lrgisl;
    double lrs;
    double ltvfbsdoff;
    double lu0;
    double lua;
    double lua1;
    double lub;
    double lub1;
    double luc;
    double luc1;
    double lute;
    double lvbm;
    double lvbx;
    double lvfb;
    double lvfbcv;
    double lvfbsdoff;
    double lvoff;
    double lvoffcv;
    double lvsat;
    double lvth0;
    double lw;
    double lw0;
    double lwc;
    double lwl;
    double lwlc;
    double lwn;
    double lwr;
    double lxj;
    double lxt;
    double meto;
    double minr;
    double mj;
    double mjsw;
    double mjswg;
    int mobmod;
    double moin;
    double mulu0;
    double mulua;
    double mulub;
    double nch;
    double nf;
    double nfactor;
    double ngate;
    double nigbacc;
    double nigbinv;
    double nigc;
    double nj;
    double nlx;
    double noff;
    double noia;
    double noib;
    double noic;
    int noimod;
    int nqsmod;
    double nrd;
    double nrs;
    double nsd;
    double nsub;
    double ntox;
    double pa0;
    double pa1;
    double pa2;
    double pacde;
    double pagidl;
    double pagisl;
    double pags;
    double paigbacc;
    double paigbinv;
    double paigc;
    double paigd;
    double paigs;
    double paigsd;
    double palpha0;
    double palpha1;
    int paramchk;
    double pat;
    double pb;
    double pb0;
    double pb1;
    double pbeta0;
    double pbgidl;
    double pbgisl;
    double pbigbacc;
    double pbigbinv;
    double pbigc;
    double pbigd;
    double pbigs;
    double pbigsd;
    double pbsw;
    double pbswg;
    double pcdsc;
    double pcdscb;
    double pcdscd;
    double pcf;
    double pcgdl;
    double pcgidl;
    double pcgisl;
    double pcgsl;
    double pcigbacc;
    double pcigbinv;
    double pcigc;
    double pcigd;
    double pcigs;
    double pcigsd;
    double pcit;
    double pckappa;
    double pclc;
    double pcle;
    double pclm;
    double pd;
    double pdelta;
    double pdiblc1;
    double pdiblc2;
    double pdiblcb;
    double pdrout;
    double pdsub;
    double pdvt0;
    double pdvt0w;
    double pdvt1;
    double pdvt1w;
    double pdvt2;
    double pdvt2w;
    double pdwb;
    double pdwg;
    double pegidl;
    double pegisl;
    double peigbinv;
    double pelm;
    double peta0;
    double petab;
    double pfgidl;
    double pfgisl;
    double pgamma1;
    double pgamma2;
    double php;
    double pigcd;
    double pk1;
    double pk2;
    double pk3;
    double pk3b;
    double pketa;
    double pkgidl;
    double pkgisl;
    double pkt1;
    double pkt1l;
    double pkt2;
    double pku0;
    double pkvth0;
    double pmoin;
    double pnch;
    double pnfactor;
    double pngate;
    double pnigbacc;
    double pnigbinv;
    double pnigc;
    double pnlx;
    double pnoff;
    double pnpeak;
    double pnsd;
    double pnsub;
    double pntox;
    double poxedge;
    double ppclm;
    double ppdiblc1;
    double ppdiblc2;
    double ppdiblcb;
    double ppigcd;
    double ppoxedge;
    double pprt;
    double pprwb;
    double pprwg;
    double ppscbe1;
    double ppscbe2;
    double ppvag;
    double prd;
    double prdsw;
    double prgidl;
    double prgisl;
    double prs;
    double prt;
    double prwb;
    double prwg;
    double ps;
    double pscbe1;
    double pscbe2;
    double pta;
    double ptp;
    double ptvfbsdoff;
    double pu0;
    double pua;
    double pua1;
    double pub;
    double pub1;
    double puc;
    double puc1;
    double pute;
    double pvag;
    double pvbm;
    double pvbx;
    double pvfb;
    double pvfbcv;
    double pvfbsdoff;
    double pvoff;
    double pvoffcv;
    double pvsat;
    double pvth0;
    double pw0;
    double pwr;
    double pxj;
    double pxt;
    double rd;
    double rdc;
    double rdsw;
    double rgidl;
    double rgisl;
    double rs;
    double rsc;
    double rsh;
    double sa;
    double sa0;
    double sa1;
    double sa10;
    double sa2;
    double sa3;
    double sa4;
    double sa5;
    double sa6;
    double sa7;
    double sa8;
    double sa9;
    double saref;
    double sb;
    double sb0;
    double sb1;
    double sb10;
    double sb2;
    double sb3;
    double sb4;
    double sb5;
    double sb6;
    double sb7;
    double sb8;
    double sb9;
    double sbref;
    double sc;
    double sd;
    double steta0;
    int stimod;
    double stk2;
    double sw1;
    double sw10;
    double sw2;
    double sw3;
    double sw4;
    double sw5;
    double sw6;
    double sw7;
    double sw8;
    double sw9;
    double tcj;
    double tcjsw;
    double tcjswg;
    int tempmod;
    double tku0;
    double tlev;
    double tlevc;
    double tnom;
    double tox;
    double toxe;
    double toxm;
    double toxref;
    double tpb;
    double tpbsw;
    double tpbswg;
    double trd;
    double trise;
    double trs;
    double tvfbsdoff;
    int type;
    double u0;
    double ua;
    double ua1;
    double ub;
    double ub1;
    double uc;
    double uc1;
    double ute;
    double vbm;
    double vbox;
    double vbx;
    int verbose;
    double version;
    double vfb;
    double vfbcv;
    int vfbflag;
    double vfbsdoff;
    double vgslim;
    double voff;
    double voffcv;
    double vsat;
    double vth0;
    double vtm0;
    double w;
    double w0;
    double wa0;
    double wa1;
    double wa2;
    double wacde;
    double wagidl;
    double wagisl;
    double wags;
    double waigbacc;
    double waigbinv;
    double waigc;
    double waigd;
    double waigs;
    double waigsd;
    double walpha0;
    double walpha1;
    double wat;
    double wb0;
    double wb1;
    double wbeta0;
    double wbgidl;
    double wbgisl;
    double wbigbacc;
    double wbigbinv;
    double wbigc;
    double wbigd;
    double wbigs;
    double wbigsd;
    double wcdsc;
    double wcdscb;
    double wcdscd;
    double wcf;
    double wcgdl;
    double wcgidl;
    double wcgisl;
    double wcgsl;
    double wcigbacc;
    double wcigbinv;
    double wcigc;
    double wcigd;
    double wcigs;
    double wcigsd;
    double wcit;
    double wckappa;
    double wclc;
    double wcle;
    double wd;
    double wdelta;
    double wdrout;
    double wdsub;
    double wdvt0;
    double wdvt0w;
    double wdvt1;
    double wdvt1w;
    double wdvt2;
    double wdvt2w;
    double wdwb;
    double wdwg;
    double wegidl;
    double wegisl;
    double weigbinv;
    double welm;
    double weta0;
    double wetab;
    double wfgidl;
    double wfgisl;
    double wgamma1;
    double wgamma2;
    double wint;
    double wk1;
    double wk2;
    double wk3;
    double wk3b;
    double wketa;
    double wkgidl;
    double wkgisl;
    double wkt1;
    double wkt1l;
    double wkt2;
    double wku0;
    double wkvth0;
    double wl;
    double wlc;
    double wln;
    double wlod;
    double wlodku0;
    double wlodvth;
    double wmax;
    double wmin;
    double wmlt;
    double wmoin;
    double wnch;
    double wnfactor;
    double wngate;
    double wnigbacc;
    double wnigbinv;
    double wnigc;
    double wnlx;
    double wnoff;
    double wnoi;
    double wnpeak;
    double wnsd;
    double wnsub;
    double wntox;
    double wpclm;
    double wpdiblc1;
    double wpdiblc2;
    double wpdiblcb;
    double wpigcd;
    double wpoxedge;
    double wprt;
    double wprwb;
    double wprwg;
    double wpscbe1;
    double wpscbe2;
    double wpvag;
    double wr;
    double wrd;
    double wrdsw;
    double wref;
    double wrgidl;
    double wrgisl;
    double wrs;
    double wtvfbsdoff;
    double wu0;
    double wua;
    double wua1;
    double wub;
    double wub1;
    double wuc;
    double wuc1;
    double wute;
    double wvbm;
    double wvbx;
    double wvfb;
    double wvfbcv;
    double wvfbsdoff;
    double wvoff;
    double wvoffcv;
    double wvsat;
    double wvth0;
    double ww;
    double ww0;
    double wwc;
    double wwl;
    double wwlc;
    double wwn;
    double wwr;
    double wxj;
    double wxt;
    double xj;
    double xjbvd;
    double xjbvs;
    double xl;
    double xlref;
    double xpart;
    double xt;
    double xti;
    double xw;
    double xwref;
  // Local variables extend to global vars in Instance 
  double BSIM3vgslim;
  double BSIM3bvs;
  double BSIM3bvd;
  double BSIM3ijthsrev;
  double BSIM3ijthdrev;
  double BSIM3xjbvs;
  double BSIM3xjbvd;
  double BSIM3XExpBVD;
  double BSIM3vjdmFwd;
  double BSIM3vjsmFwd;
  double BSIM3DrainSatCurrent;
  double BSIM3IVjdmFwd;
  double BSIM3DslpFwd;
  double BSIM3vjdmRev;
  double BSIM3IVjdmRev;
  double BSIM3DslpRev;
  double BSIM3XExpBVS;
  double BSIM3SourceSatCurrent;
  double BSIM3IVjsmFwd;
  double BSIM3SslpFwd;
  double BSIM3vjsmRev;
  double BSIM3IVjsmRev;
  double BSIM3SslpRev;
  CogendaFadType BSIM3thetavth;
  double BSIM3cgdo;
  double BSIM3cgso;
  double BSIM3drainArea;
  double BSIM3sourceArea;
  double BSIM3drainSquares;
  double BSIM3sourceSquares;
  double BSIM3drainPerimeter;
  double BSIM3sourcePerimeter;
  double BSIM3sourceResistance;
  double BSIM3drainResistance;
  double BSIM3vjsm;
  double BSIM3IsEvjsm;
  double BSIM3vjdm;
  double BSIM3IsEvjdm;
  double BSIM3cdsc;
  double BSIM3cdscb;
  double BSIM3cdscd;
  double BSIM3cit;
  double BSIM3nfactor;
  double BSIM3xj;
  double BSIM3vsat;
  double BSIM3at;
  double BSIM3a0;
  double BSIM3ags;
  double BSIM3a1;
  double BSIM3a2;
  double BSIM3keta;
  double BSIM3nsub;
  double BSIM3npeak;
  double BSIM3ngate;
  double BSIM3gamma1;
  double BSIM3gamma2;
  double BSIM3vbx;
  double BSIM3vbi;
  double BSIM3vbm;
  double BSIM3vbsc;
  double BSIM3xt;
  double BSIM3phi;
  double BSIM3litl;
  double BSIM3k1;
  double BSIM3kt1;
  double BSIM3kt1l;
  double BSIM3kt2;
  double BSIM3k2;
  double BSIM3k3;
  double BSIM3k3b;
  double BSIM3w0;
  double BSIM3nlx;
  double BSIM3dvt0;
  double BSIM3dvt1;
  double BSIM3dvt2;
  double BSIM3dvt0w;
  double BSIM3dvt1w;
  double BSIM3dvt2w;
  double BSIM3drout;
  double BSIM3dsub;
  double BSIM3vth0;
  double BSIM3ua;
  double BSIM3ua1;
  double BSIM3ub;
  double BSIM3ub1;
  double BSIM3uc;
  double BSIM3uc1;
  double BSIM3u0;
  double BSIM3ute;
  double BSIM3voff;
  double BSIM3vfb;
  double BSIM3delta;
  double BSIM3rdsw;
  double BSIM3rds0;
  double BSIM3prwg;
  double BSIM3prwb;
  double BSIM3prt;
  double BSIM3eta0;
  double BSIM3etab;
  double BSIM3pclm;
  double BSIM3pdibl1;
  double BSIM3pdibl2;
  double BSIM3pdiblb;
  double BSIM3pscbe1;
  double BSIM3pscbe2;
  double BSIM3pvag;
  double BSIM3wr;
  double BSIM3dwg;
  double BSIM3dwb;
  double BSIM3b0;
  double BSIM3b1;
  double BSIM3alpha0;
  double BSIM3alpha1;
  double BSIM3beta0;
  double BSIM3elm;
  double BSIM3lelm;
  double BSIM3pelm;
  double BSIM3welm;
  double BSIM3cgsl;
  double BSIM3cgdl;
  double BSIM3ckappa;
  double BSIM3cf;
  double BSIM3clc;
  double BSIM3cle;
  double BSIM3vfbcv;
  double BSIM3noff;
  double BSIM3voffcv;
  double BSIM3acde;
  double BSIM3moin;
  double BSIM3dw;
  double BSIM3dl;
  double BSIM3leff;
  double BSIM3weff;
  double BSIM3dwc;
  double BSIM3dlc;
  double BSIM3leffCV;
  double BSIM3weffCV;
  double BSIM3abulkCVfactor;
  double BSIM3cgbo;
  double BSIM3u0temp;
  double BSIM3vsattemp;
  double BSIM3sqrtPhi;
  double BSIM3phis3;
  double BSIM3Xdep0;
  double BSIM3theta0vb0;
  double BSIM3thetaRout;
  double BSIM3cdep0;
  double BSIM3vfbzb;
  double BSIM3ldeb;
  double BSIM3k1ox;
  double BSIM3k2ox;
  double BSIM3tox;
  double BSIM3toxm;
  double BSIM3ijth;
  double BSIM3tcj;
  double BSIM3tcjsw;
  double BSIM3tcjswg;
  double BSIM3tpb;
  double BSIM3tpbsw;
  double BSIM3tpbswg;
  double BSIM3lcdsc;
  double BSIM3lcdscb;
  double BSIM3lcdscd;
  double BSIM3lcit;
  double BSIM3lnfactor;
  double BSIM3lxj;
  double BSIM3lvsat;
  double BSIM3lat;
  double BSIM3la0;
  double BSIM3lags;
  double BSIM3la1;
  double BSIM3la2;
  double BSIM3lketa;
  double BSIM3lnsub;
  double BSIM3lnpeak;
  double BSIM3lngate;
  double BSIM3lgamma1;
  double BSIM3lgamma2;
  double BSIM3lvbx;
  double BSIM3lvbm;
  double BSIM3lxt;
  double BSIM3lk1;
  double BSIM3lkt1;
  double BSIM3lkt1l;
  double BSIM3lkt2;
  double BSIM3lk2;
  double BSIM3lk3;
  double BSIM3lk3b;
  double BSIM3lw0;
  double BSIM3lnlx;
  double BSIM3ldvt0;
  double BSIM3ldvt1;
  double BSIM3ldvt2;
  double BSIM3ldvt0w;
  double BSIM3ldvt1w;
  double BSIM3ldvt2w;
  double BSIM3ldrout;
  double BSIM3ldsub;
  double BSIM3lvth0;
  double BSIM3lua;
  double BSIM3lua1;
  double BSIM3lub;
  double BSIM3lub1;
  double BSIM3luc;
  double BSIM3luc1;
  double BSIM3lu0;
  double BSIM3lute;
  double BSIM3lvoff;
  double BSIM3ldelta;
  double BSIM3lrdsw;
  double BSIM3lprwg;
  double BSIM3lprwb;
  double BSIM3lprt;
  double BSIM3leta0;
  double BSIM3letab;
  double BSIM3lpclm;
  double BSIM3lpdibl1;
  double BSIM3lpdibl2;
  double BSIM3lpdiblb;
  double BSIM3lpscbe1;
  double BSIM3lpscbe2;
  double BSIM3lpvag;
  double BSIM3lwr;
  double BSIM3ldwg;
  double BSIM3ldwb;
  double BSIM3lb0;
  double BSIM3lb1;
  double BSIM3lalpha0;
  double BSIM3lalpha1;
  double BSIM3lbeta0;
  double BSIM3lvfb;
  double BSIM3lcgsl;
  double BSIM3lcgdl;
  double BSIM3lckappa;
  double BSIM3lcf;
  double BSIM3lclc;
  double BSIM3lcle;
  double BSIM3lvfbcv;
  double BSIM3lnoff;
  double BSIM3lvoffcv;
  double BSIM3lmoin;
  double BSIM3lacde;
  double BSIM3wcdsc;
  double BSIM3wcdscb;
  double BSIM3wcdscd;
  double BSIM3wcit;
  double BSIM3wnfactor;
  double BSIM3wxj;
  double BSIM3wvsat;
  double BSIM3wat;
  double BSIM3wa0;
  double BSIM3wags;
  double BSIM3wa1;
  double BSIM3wketa;
  double BSIM3wnsub;
  double BSIM3wnpeak;
  double BSIM3wngate;
  double BSIM3wgamma1;
  double BSIM3wgamma2;
  double BSIM3wvbx;
  double BSIM3wvbm;
  double BSIM3wxt;
  double BSIM3wk1;
  double BSIM3wkt1;
  double BSIM3wkt1l;
  double BSIM3wkt2;
  double BSIM3wk2;
  double BSIM3wk3;
  double BSIM3wk3b;
  double BSIM3ww0;
  double BSIM3wnlx;
  double BSIM3wdvt0;
  double BSIM3wdvt1;
  double BSIM3wdvt2;
  double BSIM3wdvt0w;
  double BSIM3wdvt1w;
  double BSIM3wa2;
  double BSIM3wdvt2w;
  double BSIM3wdrout;
  double BSIM3wdsub;
  double BSIM3wvth0;
  double BSIM3wua;
  double BSIM3wua1;
  double BSIM3wub;
  double BSIM3wub1;
  double BSIM3wuc;
  double BSIM3wuc1;
  double BSIM3wu0;
  double BSIM3wute;
  double BSIM3wvoff;
  double BSIM3wdelta;
  double BSIM3wrdsw;
  double BSIM3wprwg;
  double BSIM3wprwb;
  double BSIM3wprt;
  double BSIM3weta0;
  double BSIM3wetab;
  double BSIM3wpclm;
  double BSIM3wpdibl1;
  double BSIM3wpdibl2;
  double BSIM3wpdiblb;
  double BSIM3wpscbe1;
  double BSIM3wpscbe2;
  double BSIM3wpvag;
  double BSIM3wwr;
  double BSIM3wdwg;
  double BSIM3wdwb;
  double BSIM3wb0;
  double BSIM3wb1;
  double BSIM3walpha0;
  double BSIM3walpha1;
  double BSIM3wbeta0;
  double BSIM3wvfb;
  double BSIM3wcgsl;
  double BSIM3wcgdl;
  double BSIM3wckappa;
  double BSIM3wcf;
  double BSIM3wclc;
  double BSIM3wcle;
  double BSIM3wvfbcv;
  double BSIM3wnoff;
  double BSIM3wvoffcv;
  double BSIM3wacde;
  double BSIM3wmoin;
  double BSIM3pcdsc;
  double BSIM3pcdscb;
  double BSIM3pcdscd;
  double BSIM3pcit;
  double BSIM3pnfactor;
  double BSIM3pxj;
  double BSIM3pvsat;
  double BSIM3pat;
  double BSIM3pa0;
  double BSIM3pags;
  double BSIM3pa1;
  double BSIM3pa2;
  double BSIM3pdvt1w;
  double BSIM3pketa;
  double BSIM3pnsub;
  double BSIM3pnpeak;
  double BSIM3pngate;
  double BSIM3pgamma1;
  double BSIM3pgamma2;
  double BSIM3pvbx;
  double BSIM3pvbm;
  double BSIM3pxt;
  double BSIM3pk1;
  double BSIM3pkt1;
  double BSIM3pkt1l;
  double BSIM3pkt2;
  double BSIM3pk2;
  double BSIM3pk3;
  double BSIM3pk3b;
  double BSIM3pw0;
  double BSIM3pnlx;
  double BSIM3pdvt0;
  double BSIM3pdvt1;
  double BSIM3pdvt2;
  double BSIM3pdvt0w;
  double BSIM3pdvt2w;
  double BSIM3pdrout;
  double BSIM3pdsub;
  double BSIM3pvth0;
  double BSIM3pua;
  double BSIM3pua1;
  double BSIM3pub;
  double BSIM3pub1;
  double BSIM3puc;
  double BSIM3puc1;
  double BSIM3pu0;
  double BSIM3pute;
  double BSIM3pvoff;
  double BSIM3pdelta;
  double BSIM3prdsw;
  double BSIM3pprwg;
  double BSIM3pprwb;
  double BSIM3pprt;
  double BSIM3peta0;
  double BSIM3petab;
  double BSIM3ppclm;
  double BSIM3ppdibl1;
  double BSIM3ppdibl2;
  double BSIM3ppdiblb;
  double BSIM3ppscbe1;
  double BSIM3ppscbe2;
  double BSIM3ppvag;
  double BSIM3pwr;
  double BSIM3pdwg;
  double BSIM3pdwb;
  double BSIM3pb0;
  double BSIM3pb1;
  double BSIM3palpha0;
  double BSIM3palpha1;
  double BSIM3pbeta0;
  double BSIM3pvfb;
  double BSIM3pcgsl;
  double BSIM3pcgdl;
  double BSIM3pckappa;
  double BSIM3pcf;
  double BSIM3pclc;
  double BSIM3pcle;
  double BSIM3pvfbcv;
  double BSIM3pnoff;
  double BSIM3pvoffcv;
  double BSIM3pacde;
  double BSIM3tnom;
  double BSIM3xpart;
  double BSIM3pmoin;
  double BSIM3sheetResistance;
  double BSIM3jctSatCurDensity;
  double BSIM3jctSidewallSatCurDensity;
  double BSIM3bulkJctPotential;
  double BSIM3bulkJctBotGradingCoeff;
  double BSIM3bulkJctSideGradingCoeff;
  double BSIM3bulkJctGateSideGradingCoeff;
  double BSIM3sidewallJctPotential;
  double BSIM3GatesidewallJctPotential;
  double BSIM3unitAreaJctCap;
  double BSIM3unitLengthSidewallJctCap;
  double BSIM3unitLengthGateSidewallJctCap;
  double BSIM3jctEmissionCoeff;
  double BSIM3jctTempExponent;
  double BSIM3Lint;
  double BSIM3Ll;
  double BSIM3Llc;
  double BSIM3Lln;
  double BSIM3Lw;
  double BSIM3Lwc;
  double BSIM3Lwn;
  double BSIM3Lwl;
  double BSIM3Lwlc;
  double BSIM3Wint;
  double BSIM3Wl;
  double BSIM3Wlc;
  double BSIM3Wln;
  double BSIM3Ww;
  double BSIM3Wwc;
  double BSIM3Wwn;
  double BSIM3Wwl;
  double BSIM3Wwlc;
  double BSIM3vtm;
  double BSIM3cox;
  double BSIM3factor1;
  double BSIM3PhiB;
  double BSIM3PhiBSW;
  double BSIM3PhiBSWG;
  double BSIM3jctTempSatCurDensity;
  double BSIM3jctSidewallTempSatCurDensity;
  double BSIM3unitAreaTempJctCap;
  double BSIM3unitLengthSidewallTempJctCap;
  double BSIM3unitLengthGateSidewallTempJctCap;
  double BSIM3em;
  double BSIM3ef;
  double BSIM3af;
  double BSIM3kf;
  double SourceSatCurrent;
  double DrainSatCurrent;
  CogendaFadType qgd;
  CogendaFadType qgs;
  CogendaFadType qgb;
  CogendaFadType VgstNVt;
  CogendaFadType ExpVgst;
  CogendaFadType qbs;
  CogendaFadType qbd;
  double czbd;
  double czbdsw;
  double czbdswg;
  double czbs;
  double czbssw;
  double czbsswg;
  CogendaFadType evbd;
  CogendaFadType evbs;
  CogendaFadType arg;
  CogendaFadType sarg;
  CogendaFadType Vfbeff;
  CogendaFadType V3;
  CogendaFadType V4;
  double MJ;
  double MJSW;
  double MJSWG;
  CogendaFadType vbd;
  CogendaFadType vbs;
  CogendaFadType vds;
  CogendaFadType vgb;
  CogendaFadType vgd;
  CogendaFadType vgs;
  CogendaFadType qgate;
  CogendaFadType qbulk;
  CogendaFadType qdrn;
  CogendaFadType qsrc;
  CogendaFadType Vds;
  CogendaFadType Vgs;
  CogendaFadType Vbs;
  CogendaFadType Vgs_eff;
  double Vfb;
  CogendaFadType Phis;
  CogendaFadType sqrtPhis;
  CogendaFadType Vth;
  CogendaFadType Vgst;
  double Nvtm;
  double Vtm;
  CogendaFadType n;
  double local_voffcv;
  CogendaFadType local_noff;
  CogendaFadType ExpArg;
  double V0;
  CogendaFadType CoxWLcen;
  double LINK;
  CogendaFadType DeltaPhi;
  CogendaFadType VgDP;
  double Cox;
  double Tox;
  CogendaFadType Tcen;
  CogendaFadType Ccen;
  CogendaFadType Coxeff;
  CogendaFadType Denomi;
  CogendaFadType ueff;
  CogendaFadType Esat;
  CogendaFadType Vdsat;
  CogendaFadType EsatL;
  CogendaFadType Vasat;
  CogendaFadType Va;
  CogendaFadType Vbseff;
  CogendaFadType VbseffCV;
  CogendaFadType Arg1;
  double One_Third_CoxWL;
  double Two_Third_CoxWL;
  CogendaFadType Alphaz;
  double CoxWL;
  CogendaFadType T0;
  CogendaFadType T1;
  CogendaFadType T2;
  CogendaFadType dT2_dVg;
  CogendaFadType T3;
  CogendaFadType T4;
  CogendaFadType T5;
  CogendaFadType T6;
  CogendaFadType T7;
  CogendaFadType T8;
  CogendaFadType T9;
  CogendaFadType T10;
  double T11;
  CogendaFadType T12;
  CogendaFadType T13;
  CogendaFadType T14;
  CogendaFadType tmp;
  CogendaFadType Abulk;
  CogendaFadType Abulk0;
  CogendaFadType X1;
  CogendaFadType X2;
  CogendaFadType Vgs_x2;
  CogendaFadType vgsmax_t3;
  CogendaFadType Vgs_lim;
  CogendaFadType vgslim_t3;
  CogendaFadType VACLM;
  CogendaFadType VADIBL;
  CogendaFadType Xdep;
  CogendaFadType lt1;
  CogendaFadType ltw;
  CogendaFadType Delt_vth;
  CogendaFadType Theta0;
  double TempRatio;
  CogendaFadType tmp1;
  CogendaFadType tmp2;
  CogendaFadType tmp3;
  CogendaFadType tmp4;
  CogendaFadType DIBL_Sft;
  CogendaFadType dDIBL_Sft_dVd;
  CogendaFadType Lambda;
  CogendaFadType Vgsteff;
  CogendaFadType Vdseff;
  CogendaFadType VdseffCV;
  CogendaFadType diffVds;
  CogendaFadType beta;
  CogendaFadType gche;
  CogendaFadType fgche1;
  CogendaFadType fgche2;
  CogendaFadType Idl;
  CogendaFadType Idsa;
  CogendaFadType Ibs;
  CogendaFadType Ibd;
  CogendaFadType Ids;
  CogendaFadType Gm;
  CogendaFadType Gds;
  CogendaFadType Gmb;
  CogendaFadType Isub;
  CogendaFadType VASCBE;
  CogendaFadType CoxWovL;
  CogendaFadType Rds;
  CogendaFadType WVCox;
  CogendaFadType WVCoxRds;
  CogendaFadType Vgst2Vtm;
  CogendaFadType VdsatCV;
  double Leff;
  CogendaFadType Weff;
  CogendaFadType AbulkCV;
  CogendaFadType qgdo;
  CogendaFadType qgso;
  CogendaFadType local_cgdo;
  CogendaFadType local_cgso;
  CogendaFadType Qac0;
  CogendaFadType Qsub0;
  CogendaFadType BSIM3cbs;
  CogendaFadType BSIM3cbd;
  double Eg;
  double Eg0;
  double ni;
  double Ldrn;
  double Wdrn;
  double delTemp;
  double T;
  double TRatio;
  double Inv_L;
  double Inv_W;
  double Inv_LW;
  double Vtm0;
  double Inv_sa0;
  double Inv_sb0;
  CogendaFadType dAbulk_dVg;
  CogendaFadType vgs_eff;
  CogendaFadType vgd_eff;
  double here_w;
  double larg;
  double warg;
  double rseff;
  double rdeff;
  double val;
  double ecjgat;
  double ecjsw;
  double xmult;
  double rdpr;
  double rspr;
  double Lnew;
  double Wnew;
  CogendaFadType devbsdvbs;
  CogendaFadType devbddvbd;
  double BSIM3agidl;
  double BSIM3lagidl;
  double BSIM3wagidl;
  double BSIM3pagidl;
  double BSIM3bgidl;
  double BSIM3lbgidl;
  double BSIM3wbgidl;
  double BSIM3pbgidl;
  double BSIM3cgidl;
  double BSIM3lcgidl;
  double BSIM3wcgidl;
  double BSIM3pcgidl;
  double BSIM3egidl;
  double BSIM3legidl;
  double BSIM3wegidl;
  double BSIM3pegidl;
  double BSIM3nigc;
  double BSIM3lnigc;
  double BSIM3wnigc;
  double BSIM3pnigc;
  double BSIM3aigc;
  double BSIM3laigc;
  double BSIM3waigc;
  double BSIM3paigc;
  double BSIM3bigc;
  double BSIM3lbigc;
  double BSIM3wbigc;
  double BSIM3pbigc;
  double BSIM3cigc;
  double BSIM3lcigc;
  double BSIM3wcigc;
  double BSIM3pcigc;
  double BSIM3aigbacc;
  double BSIM3laigbacc;
  double BSIM3waigbacc;
  double BSIM3paigbacc;
  double BSIM3bigbacc;
  double BSIM3lbigbacc;
  double BSIM3wbigbacc;
  double BSIM3pbigbacc;
  double BSIM3cigbacc;
  double BSIM3lcigbacc;
  double BSIM3wcigbacc;
  double BSIM3pcigbacc;
  double BSIM3aigbinv;
  double BSIM3laigbinv;
  double BSIM3waigbinv;
  double BSIM3paigbinv;
  double BSIM3bigbinv;
  double BSIM3lbigbinv;
  double BSIM3wbigbinv;
  double BSIM3pbigbinv;
  double BSIM3cigbinv;
  double BSIM3lcigbinv;
  double BSIM3wcigbinv;
  double BSIM3pcigbinv;
  double BSIM3eigbinv;
  double BSIM3leigbinv;
  double BSIM3weigbinv;
  double BSIM3peigbinv;
  double BSIM3nigbinv;
  double BSIM3lnigbinv;
  double BSIM3wnigbinv;
  double BSIM3pnigbinv;
  double BSIM3toxe;
  double BSIM3vtm0;
  double BSIM3toxref;
  double BSIM3ntox;
  double BSIM3lntox;
  double BSIM3wntox;
  double BSIM3pntox;
  double BSIM3pigcd;
  double BSIM3lpigcd;
  double BSIM3wpigcd;
  double BSIM3ppigcd;
  double BSIM3nsd;
  double BSIM3lnsd;
  double BSIM3wnsd;
  double BSIM3pnsd;
  double BSIM3vfbsdoff;
  double BSIM3vfbsd;
  double BSIM3lvfbsdoff;
  double BSIM3wvfbsdoff;
  double BSIM3pvfbsdoff;
  double BSIM3tvfbsdoff;
  double BSIM3ltvfbsdoff;
  double BSIM3wtvfbsdoff;
  double BSIM3ptvfbsdoff;
  double BSIM3poxedge;
  double BSIM3lpoxedge;
  double BSIM3wpoxedge;
  double BSIM3waigs;
  double BSIM3laigs;
  double BSIM3paigs;
  double BSIM3bigs;
  double BSIM3wbigs;
  double BSIM3lbigs;
  double BSIM3pbigs;
  double BSIM3cigs;
  double BSIM3wcigs;
  double BSIM3lcigs;
  double BSIM3pcigs;
  double BSIM3waigd;
  double BSIM3laigd;
  double BSIM3paigd;
  double BSIM3bigd;
  double BSIM3wbigd;
  double BSIM3lbigd;
  double BSIM3pbigd;
  double BSIM3cigd;
  double BSIM3wcigd;
  double BSIM3lcigd;
  double BSIM3pcigd;
  double BSIM3ppoxedge;
  double BSIM3dlcig;
  double BSIM3aigsd;
  double BSIM3laigsd;
  double BSIM3waigsd;
  double BSIM3aigs;
  double BSIM3aigd;
  double BSIM3paigsd;
  double BSIM3bigsd;
  double BSIM3lbigsd;
  double BSIM3wbigsd;
  double BSIM3pbigsd;
  double BSIM3cigsd;
  double BSIM3lcigsd;
  double BSIM3wcigsd;
  double BSIM3pcigsd;
  double BSIM3nigbacc;
  double BSIM3lnigbacc;
  double BSIM3wnigbacc;
  double BSIM3pnigbacc;
  double BSIM3agisl;
  double BSIM3wagisl;
  double BSIM3lagisl;
  double BSIM3pagisl;
  double BSIM3bgisl;
  double BSIM3wbgisl;
  double BSIM3lbgisl;
  double BSIM3pbgisl;
  double BSIM3cgisl;
  double BSIM3wcgisl;
  double BSIM3lcgisl;
  double BSIM3pcgisl;
  double BSIM3egisl;
  double BSIM3wegisl;
  double BSIM3legisl;
  double BSIM3pegisl;
  double BSIM3rgisl;
  double BSIM3wrgisl;
  double BSIM3lrgisl;
  double BSIM3prgisl;
  double BSIM3kgisl;
  double BSIM3wkgisl;
  double BSIM3lkgisl;
  double BSIM3pkgisl;
  double BSIM3fgisl;
  double BSIM3wfgisl;
  double BSIM3lfgisl;
  double BSIM3pfgisl;
  double BSIM3rgidl;
  double BSIM3wrgidl;
  double BSIM3lrgidl;
  double BSIM3prgidl;
  double BSIM3kgidl;
  double BSIM3wkgidl;
  double BSIM3lkgidl;
  double BSIM3pkgidl;
  double BSIM3fgidl;
  double BSIM3wfgidl;
  double BSIM3lfgidl;
  double BSIM3pfgidl;
  double BSIM3ToxRatio;
  double BSIM3Aechvb;
  double BSIM3Bechvb;
  double BSIM3AechvbEdge;
  double BSIM3BechvbEdge;
  double BSIM3ToxRatioEdge;
  CogendaFadType Igidl;
  CogendaFadType Igisl;
  CogendaFadType Voxacc;
  CogendaFadType Voxdepinv;
  CogendaFadType VxNVt;
  CogendaFadType ExpVxNVt;
  CogendaFadType Vaux;
  CogendaFadType Igc;
  CogendaFadType Igcs;
  CogendaFadType Igcd;
  CogendaFadType Igs;
  CogendaFadType Igbacc;
  CogendaFadType Igbinv;
  CogendaFadType Igb;
  CogendaFadType Igd;
  CogendaFadType Pigcd;
  double BSIM3sa;
  double BSIM3sb;
  double BSIM3mulu0;
  double BSIM3mulua;
  double BSIM3mulub;
  double BSIM3sa0;
  double BSIM3sb0;
  double BSIM3wlod;
  double BSIM3ku0;
  double BSIM3kvsat;
  double BSIM3kvth0;
  double BSIM3tku0;
  double here_BSIM3kvth0;
  double BSIM3llodku0;
  double BSIM3wlodku0;
  double BSIM3llodvth;
  double BSIM3wlodvth;
  double BSIM3lku0;
  double BSIM3wku0;
  double BSIM3pku0;
  double BSIM3lkvth0;
  double BSIM3wkvth0;
  double BSIM3pkvth0;
  double BSIM3stk2;
  double BSIM3lodk2;
  double BSIM3steta0;
  double BSIM3lodeta0;
  double BSIM3sa1;
  double BSIM3sa2;
  double BSIM3sa3;
  double BSIM3sa4;
  double BSIM3sa5;
  double BSIM3sa6;
  double BSIM3sa7;
  double BSIM3sa8;
  double BSIM3sa9;
  double BSIM3sa10;
  double BSIM3sb1;
  double BSIM3sb2;
  double BSIM3sb3;
  double BSIM3sb4;
  double BSIM3sb5;
  double BSIM3sb6;
  double BSIM3sb7;
  double BSIM3sb8;
  double BSIM3sb9;
  double BSIM3sb10;
  double BSIM3sw1;
  double BSIM3sw2;
  double BSIM3sw3;
  double BSIM3sw4;
  double BSIM3sw5;
  double BSIM3sw6;
  double BSIM3sw7;
  double BSIM3sw8;
  double BSIM3sw9;
  double BSIM3sw10;
  double W_tmp;
  double BSIM3inv_od_def;
  double BSIM3rho_def;
  double BSIM3tconst;
  double Inv_saref;
  double Inv_sbref;
  double BSIM3inv_od_ref;
  double BSIM3rho_ref;
  double Inv_sa;
  double Inv_sb;
  double Inv_ODeff;
  double rho;
  double OD_offset;
  double dvth0_lod;
  double dk2_lod;
  double deta0_lod;
  double dk1_lod;
  CogendaFadType dbeta_dVg;
  CogendaFadType dbeta_dVd;
  CogendaFadType dbeta_dVb;
  double dueff_dVg;
  double dueff_dVd;
  double dueff_dVb;
  double dWeff_dVg;
  double dWeff_dVb;
  double dVdseff_dVg;
  double dVdseff_dVd;
  double dVdseff_dVb;
  CogendaFadType dgche_dVg;
  CogendaFadType dgche_dVd;
  CogendaFadType dgche_dVb;
  CogendaFadType dfgche1_dVg;
  CogendaFadType dfgche1_dVd;
  CogendaFadType dfgche1_dVb;
  CogendaFadType dfgche2_dVg;
  CogendaFadType dfgche2_dVd;
  CogendaFadType dfgche2_dVb;
  CogendaFadType dIdsa_dVg;
  CogendaFadType dIdsa_dVd;
  CogendaFadType dIdsa_dVb;
  double dVa_dVg;
  double dVa_dVd;
  double dVa_dVb;
  CogendaFadType dVASCBE_dVg;
  CogendaFadType dVASCBE_dVd;
  CogendaFadType dVASCBE_dVb;
  double dVgsteff_dVg;
  double dVgsteff_dVd;
  double dVgsteff_dVb;
  double dVbseff_dVb;
  CogendaFadType dT0_dVg;
  CogendaFadType dT0_dVd;
  CogendaFadType dT0_dVb;
  double dEsatL_dVg;
  double dEsatL_dVd;
  double dEsatL_dVb;
  double dRds_dVg;
  double dRds_dVb;
  CogendaFadType dIdl_dVg;
  CogendaFadType dIdl_dVd;
  CogendaFadType dIdl_dVb;
  double dAbulk_dVb;
  CogendaFadType thermalNoiseContrib;
  CogendaFadType flickerNoiseContrib;
  CogendaFadType AbovVgst2Vtm;
  CogendaFadType N0;
  CogendaFadType Nl;
  CogendaFadType Qinv;
  CogendaFadType DelClm;
  int BSIM3mode;
  int BSIM3nqsMod;
  int Fatal_Flag;
  int BSIM3type;
  int BSIM3mobMod;
  int BSIM3capMod;
  int BSIM3noiMod;
  int BSIM3binUnit;
  int BSIM3npeakGiven;
  int BSIM3k1Given;
  int BSIM3k2Given;
  int BSIM3nsubGiven;
  int BSIM3xtGiven;
  int BSIM3vbxGiven;
  int BSIM3gamma1Given;
  int BSIM3gamma2Given;
  int BSIM3vth0Given;
  int BSIM3dlcGiven;
  int BSIM3binflag;
  int BSIM3breakmod;
  int BSIM3igcMod;
  int BSIM3igbMod;
  int BSIM3tempMod;
  int BSIM3agidlGiven;
  int BSIM3lagidlGiven;
  int BSIM3wagidlGiven;
  int BSIM3pagidlGiven;
  int BSIM3bgidlGiven;
  int BSIM3lbgidlGiven;
  int BSIM3wbgidlGiven;
  int BSIM3pbgidlGiven;
  int BSIM3cgidlGiven;
  int BSIM3lcgidlGiven;
  int BSIM3wcgidlGiven;
  int BSIM3pcgidlGiven;
  int BSIM3egidlGiven;
  int BSIM3legidlGiven;
  int BSIM3wegidlGiven;
  int BSIM3pegidlGiven;
  int BSIM3nigcGiven;
  int BSIM3lnigcGiven;
  int BSIM3wnigcGiven;
  int BSIM3pnigcGiven;
  int BSIM3aigcGiven;
  int BSIM3laigcGiven;
  int BSIM3waigcGiven;
  int BSIM3paigcGiven;
  int BSIM3bigcGiven;
  int BSIM3lbigcGiven;
  int BSIM3wbigcGiven;
  int BSIM3pbigcGiven;
  int BSIM3cigcGiven;
  int BSIM3lcigcGiven;
  int BSIM3wcigcGiven;
  int BSIM3pcigcGiven;
  int BSIM3aigbaccGiven;
  int BSIM3laigbaccGiven;
  int BSIM3waigbaccGiven;
  int BSIM3paigbaccGiven;
  int BSIM3bigbaccGiven;
  int BSIM3lbigbaccGiven;
  int BSIM3wbigbaccGiven;
  int BSIM3pbigbaccGiven;
  int BSIM3cigbaccGiven;
  int BSIM3lcigbaccGiven;
  int BSIM3wcigbaccGiven;
  int BSIM3pcigbaccGiven;
  int BSIM3aigbinvGiven;
  int BSIM3laigbinvGiven;
  int BSIM3waigbinvGiven;
  int BSIM3paigbinvGiven;
  int BSIM3bigbinvGiven;
  int BSIM3lbigbinvGiven;
  int BSIM3wbigbinvGiven;
  int BSIM3pbigbinvGiven;
  int BSIM3cigbinvGiven;
  int BSIM3lcigbinvGiven;
  int BSIM3wcigbinvGiven;
  int BSIM3pcigbinvGiven;
  int BSIM3eigbinvGiven;
  int BSIM3leigbinvGiven;
  int BSIM3weigbinvGiven;
  int BSIM3peigbinvGiven;
  int BSIM3nigbinvGiven;
  int BSIM3lnigbinvGiven;
  int BSIM3wnigbinvGiven;
  int BSIM3pnigbinvGiven;
  int BSIM3toxeGiven;
  int BSIM3vtm0Given;
  int BSIM3toxrefGiven;
  int BSIM3ntoxGiven;
  int BSIM3lntoxGiven;
  int BSIM3wntoxGiven;
  int BSIM3pntoxGiven;
  int BSIM3pigcdGiven;
  int BSIM3lpigcdGiven;
  int BSIM3wpigcdGiven;
  int BSIM3ppigcdGiven;
  int BSIM3nsdGiven;
  int BSIM3lnsdGiven;
  int BSIM3wnsdGiven;
  int BSIM3pnsdGiven;
  int BSIM3vfbsdoffGiven;
  int BSIM3vfbGiven;
  int BSIM3lvfbsdoffGiven;
  int BSIM3wvfbsdoffGiven;
  int BSIM3pvfbsdoffGiven;
  int BSIM3tvfbsdoffGiven;
  int BSIM3ltvfbsdoffGiven;
  int BSIM3wtvfbsdoffGiven;
  int BSIM3ptvfbsdoffGiven;
  int BSIM3poxedgeGiven;
  int BSIM3lpoxedgeGiven;
  int BSIM3wpoxedgeGiven;
  int BSIM3aigsGiven;
  int BSIM3waigsGiven;
  int BSIM3laigsGiven;
  int BSIM3paigsGiven;
  int BSIM3bigsGiven;
  int BSIM3wbigsGiven;
  int BSIM3lbigsGiven;
  int BSIM3pbigsGiven;
  int BSIM3cigsGiven;
  int BSIM3wcigsGiven;
  int BSIM3lcigsGiven;
  int BSIM3pcigsGiven;
  int BSIM3aigdGiven;
  int BSIM3waigdGiven;
  int BSIM3laigdGiven;
  int BSIM3paigdGiven;
  int BSIM3bigdGiven;
  int BSIM3wbigdGiven;
  int BSIM3lbigdGiven;
  int BSIM3pbigdGiven;
  int BSIM3cigdGiven;
  int BSIM3wcigdGiven;
  int BSIM3lcigdGiven;
  int BSIM3pcigdGiven;
  int BSIM3ppoxedgeGiven;
  int BSIM3dlcigGiven;
  int BSIM3aigsdGiven;
  int BSIM3laigsdGiven;
  int BSIM3waigsdGiven;
  int BSIM3paigsdGiven;
  int BSIM3bigsdGiven;
  int BSIM3lbigsdGiven;
  int BSIM3wbigsdGiven;
  int BSIM3pbigsdGiven;
  int BSIM3cigsdGiven;
  int BSIM3lcigsdGiven;
  int BSIM3wcigsdGiven;
  int BSIM3pcigsdGiven;
  int BSIM3nigbaccGiven;
  int BSIM3lnigbaccGiven;
  int BSIM3wnigbaccGiven;
  int BSIM3pnigbaccGiven;
  int BSIM3agislGiven;
  int BSIM3wagislGiven;
  int BSIM3lagislGiven;
  int BSIM3pagislGiven;
  int BSIM3bgislGiven;
  int BSIM3wbgislGiven;
  int BSIM3lbgislGiven;
  int BSIM3pbgislGiven;
  int BSIM3cgislGiven;
  int BSIM3wcgislGiven;
  int BSIM3lcgislGiven;
  int BSIM3pcgislGiven;
  int BSIM3egislGiven;
  int BSIM3wegislGiven;
  int BSIM3legislGiven;
  int BSIM3pegislGiven;
  int BSIM3rgislGiven;
  int BSIM3wrgislGiven;
  int BSIM3lrgislGiven;
  int BSIM3prgislGiven;
  int BSIM3kgislGiven;
  int BSIM3wkgislGiven;
  int BSIM3lkgislGiven;
  int BSIM3pkgislGiven;
  int BSIM3fgislGiven;
  int BSIM3wfgislGiven;
  int BSIM3lfgislGiven;
  int BSIM3pfgislGiven;
  int BSIM3rgidlGiven;
  int BSIM3wrgidlGiven;
  int BSIM3lrgidlGiven;
  int BSIM3prgidlGiven;
  int BSIM3kgidlGiven;
  int BSIM3wkgidlGiven;
  int BSIM3lkgidlGiven;
  int BSIM3pkgidlGiven;
  int BSIM3fgidlGiven;
  int BSIM3wfgidlGiven;
  int BSIM3lfgidlGiven;
  int BSIM3pfgidlGiven;
  int BSIM3calcacm;
  int BSIM3acm;
  int BSIM3stiMod;
  int LOD_flag;
  int BSIM3ku0temp;
  int BSIM3wlodGiven;
  int BSIM3ku0Given;
  int BSIM3kvsatGiven;
  int BSIM3kvth0Given;
  int BSIM3tku0Given;
  int BSIM3llodku0Given;
  int BSIM3wlodku0Given;
  int BSIM3llodvthGiven;
  int BSIM3wlodvthGiven;
  int BSIM3lku0Given;
  int BSIM3wku0Given;
  int BSIM3pku0Given;
  int BSIM3lkvth0Given;
  int BSIM3wkvth0Given;
  int BSIM3pkvth0Given;
  int BSIM3stk2Given;
  int BSIM3lodk2Given;
  int BSIM3steta0Given;
  int BSIM3lodeta0Given;
  int BSIM3saGiven;
  int BSIM3sbGiven;
  int BSIM3sa1Given;
  int BSIM3sa2Given;
  int BSIM3sa3Given;
  int BSIM3sa4Given;
  int BSIM3sa5Given;
  int BSIM3sa6Given;
  int BSIM3sa7Given;
  int BSIM3sa8Given;
  int BSIM3sa9Given;
  int BSIM3sa10Given;
  int BSIM3sb1Given;
  int BSIM3sb2Given;
  int BSIM3sb3Given;
  int BSIM3sb4Given;
  int BSIM3sb5Given;
  int BSIM3sb6Given;
  int BSIM3sb7Given;
  int BSIM3sb8Given;
  int BSIM3sb9Given;
  int BSIM3sb10Given;
  int BSIM3sw1Given;
  int BSIM3sw2Given;
  int BSIM3sw3Given;
  int BSIM3sw4Given;
  int BSIM3sw5Given;
  int BSIM3sw6Given;
  int BSIM3sw7Given;
  int BSIM3sw8Given;
  int BSIM3sw9Given;
  int BSIM3sw10Given;
  int doNoise;

    JacobianStamp jacStamp;   
    IdVector nodeMap;         
    PairMap pairToJacStampMap;

    // These instance-owned vectors are for storage of lead current data
    std::vector<double> leadCurrentF;
    std::vector<double> leadCurrentQ;
};

class Model : public DeviceModel
{
    typedef std::vector<Instance *> InstanceVector;

    friend class ParametricData<Model>;
    friend class Instance;
    friend struct Traits;

  public:
    Model(
      const Configuration &       configuration,
      const ModelBlock &          model_block,
      const FactoryBlock &        factory_block);

    ~Model();

private:
    Model(const Model &);
    Model &operator=(const Model &);

public:
    virtual void forEachInstance(DeviceInstanceOp &op) const /* override */;
    virtual std::ostream &printOutInstances(std::ostream &os) const;
    bool processParams();
    bool processInstanceParams();

  private:

  public:
    void addInstance(Instance *instance)
    {
      instanceContainer.push_back(instance);
    }

  private:
    std::vector<Instance*> instanceContainer;

  private:
    double cogendaModTemp;
//   Model Parameters
    double _ckt_gmin;
    double a0;
    double a1;
    double a2;
    double acde;
    int acm;
    double ad;
    double af;
    double agidl;
    double agisl;
    double ags;
    double aigbacc;
    double aigbinv;
    double aigc;
    double aigd;
    double aigs;
    double aigsd;
    double alpha0;
    double alpha1;
    double as;
    double at;
    double b0;
    double b1;
    double beta0;
    double bgidl;
    double bgisl;
    double bigbacc;
    double bigbinv;
    double bigc;
    double bigd;
    double bigs;
    double bigsd;
    int binflag;
    int binunit;
    int breakmod;
    double bvd;
    double bvj;
    double bvs;
    int calcacm;
    int capmod;
    double cbd;
    double cbs;
    double cdsc;
    double cdscb;
    double cdscd;
    double cf;
    double cgbo;
    double cgdl;
    double cgdo;
    double cgidl;
    double cgisl;
    double cgsl;
    double cgso;
    double cigbacc;
    double cigbinv;
    double cigc;
    double cigd;
    double cigs;
    double cigsd;
    double cit;
    double cj;
    double cjgate;
    double cjsw;
    double cjswg;
    double ckappa;
    double clc;
    double cle;
    double cta;
    double ctp;
    double del;
    double delk1;
    double delnfct;
    double delta;
    double deltox;
    double delvto;
    double dlc;
    double dlcig;
    double drout;
    double dsub;
    double dtoxcv;
    double dvt0;
    double dvt0w;
    double dvt1;
    double dvt1w;
    double dvt2;
    double dvt2w;
    double dwb;
    double dwc;
    double dwg;
    double ef;
    double eg;
    double egidl;
    double egisl;
    double eigbinv;
    double elm;
    double em;
    double eta0;
    double etab;
    double fc;
    double fcsw;
    double fgidl;
    double fgisl;
    double flkmod;
    double gamma1;
    double gamma2;
    double gap1;
    double gap2;
    int geo;
    int gidlmod;
    double hdif;
    int igbmod;
    int igcmod;
    double ijth;
    double ijthdrev;
    double ijthsrev;
    double imax;
    double imelt;
    double is;
    double jmax;
    double jmelt;
    double js;
    double jssw;
    double jsw;
    double k1;
    double k2;
    double k3;
    double k3b;
    double keta;
    double kf;
    double kgidl;
    double kgisl;
    double kt1;
    double kt1l;
    double kt2;
    double ku0;
    double kvsat;
    double kvth0;
    double l;
    double la0;
    double la1;
    double la2;
    double lacde;
    double lagidl;
    double lagisl;
    double lags;
    double laigbacc;
    double laigbinv;
    double laigc;
    double laigd;
    double laigs;
    double laigsd;
    double lalpha0;
    double lalpha1;
    double lat;
    double lb0;
    double lb1;
    double lbeta0;
    double lbgidl;
    double lbgisl;
    double lbigbacc;
    double lbigbinv;
    double lbigc;
    double lbigd;
    double lbigs;
    double lbigsd;
    double lcdsc;
    double lcdscb;
    double lcdscd;
    double lcf;
    double lcgdl;
    double lcgidl;
    double lcgisl;
    double lcgsl;
    double lcigbacc;
    double lcigbinv;
    double lcigc;
    double lcigd;
    double lcigs;
    double lcigsd;
    double lcit;
    double lckappa;
    double lclc;
    double lcle;
    double ld;
    double ldelta;
    double ldif;
    double ldrout;
    double ldsub;
    double ldvt0;
    double ldvt0w;
    double ldvt1;
    double ldvt1w;
    double ldvt2;
    double ldvt2w;
    double ldwb;
    double ldwg;
    double legidl;
    double legisl;
    double leigbinv;
    double lelm;
    double leta0;
    double letab;
    int level;
    double lfgidl;
    double lfgisl;
    double lgamma1;
    double lgamma2;
    double lgcd;
    double lgcs;
    double lint;
    double lk1;
    double lk2;
    double lk3;
    double lk3b;
    double lketa;
    double lkgidl;
    double lkgisl;
    double lkt1;
    double lkt1l;
    double lkt2;
    double lku0;
    double lkvth0;
    double ll;
    double llc;
    double lln;
    double llodku0;
    double llodvth;
    double lmax;
    double lmin;
    double lmlt;
    double lmoin;
    double lnch;
    double lnfactor;
    double lngate;
    double lnigbacc;
    double lnigbinv;
    double lnigc;
    double lnlx;
    double lnoff;
    double lnpeak;
    double lnsd;
    double lnsub;
    double lntox;
    double lodeta0;
    double lodk2;
    double lpclm;
    double lpdiblc1;
    double lpdiblc2;
    double lpdiblcb;
    double lpigcd;
    double lpoxedge;
    double lprt;
    double lprwb;
    double lprwg;
    double lpscbe1;
    double lpscbe2;
    double lpvag;
    double lrd;
    double lrdsw;
    double lref;
    double lrgidl;
    double lrgisl;
    double lrs;
    double ltvfbsdoff;
    double lu0;
    double lua;
    double lua1;
    double lub;
    double lub1;
    double luc;
    double luc1;
    double lute;
    double lvbm;
    double lvbx;
    double lvfb;
    double lvfbcv;
    double lvfbsdoff;
    double lvoff;
    double lvoffcv;
    double lvsat;
    double lvth0;
    double lw;
    double lw0;
    double lwc;
    double lwl;
    double lwlc;
    double lwn;
    double lwr;
    double lxj;
    double lxt;
    double meto;
    double minr;
    double mj;
    double mjsw;
    double mjswg;
    int mobmod;
    double moin;
    double mulu0;
    double mulua;
    double mulub;
    double nch;
    double nf;
    double nfactor;
    double ngate;
    double nigbacc;
    double nigbinv;
    double nigc;
    double nj;
    double nlx;
    double noff;
    double noia;
    double noib;
    double noic;
    int noimod;
    int nqsmod;
    double nrd;
    double nrs;
    double nsd;
    double nsub;
    double ntox;
    double pa0;
    double pa1;
    double pa2;
    double pacde;
    double pagidl;
    double pagisl;
    double pags;
    double paigbacc;
    double paigbinv;
    double paigc;
    double paigd;
    double paigs;
    double paigsd;
    double palpha0;
    double palpha1;
    int paramchk;
    double pat;
    double pb;
    double pb0;
    double pb1;
    double pbeta0;
    double pbgidl;
    double pbgisl;
    double pbigbacc;
    double pbigbinv;
    double pbigc;
    double pbigd;
    double pbigs;
    double pbigsd;
    double pbsw;
    double pbswg;
    double pcdsc;
    double pcdscb;
    double pcdscd;
    double pcf;
    double pcgdl;
    double pcgidl;
    double pcgisl;
    double pcgsl;
    double pcigbacc;
    double pcigbinv;
    double pcigc;
    double pcigd;
    double pcigs;
    double pcigsd;
    double pcit;
    double pckappa;
    double pclc;
    double pcle;
    double pclm;
    double pd;
    double pdelta;
    double pdiblc1;
    double pdiblc2;
    double pdiblcb;
    double pdrout;
    double pdsub;
    double pdvt0;
    double pdvt0w;
    double pdvt1;
    double pdvt1w;
    double pdvt2;
    double pdvt2w;
    double pdwb;
    double pdwg;
    double pegidl;
    double pegisl;
    double peigbinv;
    double pelm;
    double peta0;
    double petab;
    double pfgidl;
    double pfgisl;
    double pgamma1;
    double pgamma2;
    double php;
    double pigcd;
    double pk1;
    double pk2;
    double pk3;
    double pk3b;
    double pketa;
    double pkgidl;
    double pkgisl;
    double pkt1;
    double pkt1l;
    double pkt2;
    double pku0;
    double pkvth0;
    double pmoin;
    double pnch;
    double pnfactor;
    double pngate;
    double pnigbacc;
    double pnigbinv;
    double pnigc;
    double pnlx;
    double pnoff;
    double pnpeak;
    double pnsd;
    double pnsub;
    double pntox;
    double poxedge;
    double ppclm;
    double ppdiblc1;
    double ppdiblc2;
    double ppdiblcb;
    double ppigcd;
    double ppoxedge;
    double pprt;
    double pprwb;
    double pprwg;
    double ppscbe1;
    double ppscbe2;
    double ppvag;
    double prd;
    double prdsw;
    double prgidl;
    double prgisl;
    double prs;
    double prt;
    double prwb;
    double prwg;
    double ps;
    double pscbe1;
    double pscbe2;
    double pta;
    double ptp;
    double ptvfbsdoff;
    double pu0;
    double pua;
    double pua1;
    double pub;
    double pub1;
    double puc;
    double puc1;
    double pute;
    double pvag;
    double pvbm;
    double pvbx;
    double pvfb;
    double pvfbcv;
    double pvfbsdoff;
    double pvoff;
    double pvoffcv;
    double pvsat;
    double pvth0;
    double pw0;
    double pwr;
    double pxj;
    double pxt;
    double rd;
    double rdc;
    double rdsw;
    double rgidl;
    double rgisl;
    double rs;
    double rsc;
    double rsh;
    double sa;
    double sa0;
    double sa1;
    double sa10;
    double sa2;
    double sa3;
    double sa4;
    double sa5;
    double sa6;
    double sa7;
    double sa8;
    double sa9;
    double saref;
    double sb;
    double sb0;
    double sb1;
    double sb10;
    double sb2;
    double sb3;
    double sb4;
    double sb5;
    double sb6;
    double sb7;
    double sb8;
    double sb9;
    double sbref;
    double sc;
    double sd;
    double steta0;
    int stimod;
    double stk2;
    double sw1;
    double sw10;
    double sw2;
    double sw3;
    double sw4;
    double sw5;
    double sw6;
    double sw7;
    double sw8;
    double sw9;
    double tcj;
    double tcjsw;
    double tcjswg;
    int tempmod;
    double tku0;
    double tlev;
    double tlevc;
    double tnom;
    double tox;
    double toxe;
    double toxm;
    double toxref;
    double tpb;
    double tpbsw;
    double tpbswg;
    double trd;
    double trise;
    double trs;
    double tvfbsdoff;
    int type;
    double u0;
    double ua;
    double ua1;
    double ub;
    double ub1;
    double uc;
    double uc1;
    double ute;
    double vbm;
    double vbox;
    double vbx;
    int verbose;
    double version;
    double vfb;
    double vfbcv;
    int vfbflag;
    double vfbsdoff;
    double vgslim;
    double voff;
    double voffcv;
    double vsat;
    double vth0;
    double vtm0;
    double w;
    double w0;
    double wa0;
    double wa1;
    double wa2;
    double wacde;
    double wagidl;
    double wagisl;
    double wags;
    double waigbacc;
    double waigbinv;
    double waigc;
    double waigd;
    double waigs;
    double waigsd;
    double walpha0;
    double walpha1;
    double wat;
    double wb0;
    double wb1;
    double wbeta0;
    double wbgidl;
    double wbgisl;
    double wbigbacc;
    double wbigbinv;
    double wbigc;
    double wbigd;
    double wbigs;
    double wbigsd;
    double wcdsc;
    double wcdscb;
    double wcdscd;
    double wcf;
    double wcgdl;
    double wcgidl;
    double wcgisl;
    double wcgsl;
    double wcigbacc;
    double wcigbinv;
    double wcigc;
    double wcigd;
    double wcigs;
    double wcigsd;
    double wcit;
    double wckappa;
    double wclc;
    double wcle;
    double wd;
    double wdelta;
    double wdrout;
    double wdsub;
    double wdvt0;
    double wdvt0w;
    double wdvt1;
    double wdvt1w;
    double wdvt2;
    double wdvt2w;
    double wdwb;
    double wdwg;
    double wegidl;
    double wegisl;
    double weigbinv;
    double welm;
    double weta0;
    double wetab;
    double wfgidl;
    double wfgisl;
    double wgamma1;
    double wgamma2;
    double wint;
    double wk1;
    double wk2;
    double wk3;
    double wk3b;
    double wketa;
    double wkgidl;
    double wkgisl;
    double wkt1;
    double wkt1l;
    double wkt2;
    double wku0;
    double wkvth0;
    double wl;
    double wlc;
    double wln;
    double wlod;
    double wlodku0;
    double wlodvth;
    double wmax;
    double wmin;
    double wmlt;
    double wmoin;
    double wnch;
    double wnfactor;
    double wngate;
    double wnigbacc;
    double wnigbinv;
    double wnigc;
    double wnlx;
    double wnoff;
    double wnoi;
    double wnpeak;
    double wnsd;
    double wnsub;
    double wntox;
    double wpclm;
    double wpdiblc1;
    double wpdiblc2;
    double wpdiblcb;
    double wpigcd;
    double wpoxedge;
    double wprt;
    double wprwb;
    double wprwg;
    double wpscbe1;
    double wpscbe2;
    double wpvag;
    double wr;
    double wrd;
    double wrdsw;
    double wref;
    double wrgidl;
    double wrgisl;
    double wrs;
    double wtvfbsdoff;
    double wu0;
    double wua;
    double wua1;
    double wub;
    double wub1;
    double wuc;
    double wuc1;
    double wute;
    double wvbm;
    double wvbx;
    double wvfb;
    double wvfbcv;
    double wvfbsdoff;
    double wvoff;
    double wvoffcv;
    double wvsat;
    double wvth0;
    double ww;
    double ww0;
    double wwc;
    double wwl;
    double wwlc;
    double wwn;
    double wwr;
    double wxj;
    double wxt;
    double xj;
    double xjbvd;
    double xjbvs;
    double xl;
    double xlref;
    double xpart;
    double xt;
    double xti;
    double xw;
    double xwref;
};
namespace AnalogFunctions{
/*starts of Analog function exp_lim*/
template<typename GenericT> GenericT exp_lim(GenericT x)
{

if((x < 80)) {
  return exp(x);
}
else {
  return exp(80);
}
}
/*ends of Analog function exp_lim*/
} //namespace AnalogFunctions
void registerDevice();
} // namespace COGENDAbsim3_va
} // namespace Device
} // namespace Xyce
#endif //Xyce_N_DEV_bsim3_va_h
